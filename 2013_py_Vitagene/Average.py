#!/usr/bin/env python
"""
   extract data from natural standart raw file generated by Farzin
   11/12/13 - 0.0.1 : creation
"""
__author__ = "Celine Becquet"
__copyright__ = "Copyright 2013, Viragene Inc."
__maintainer__ = "Celine Becquet"
__email__ = "celine@vitagene.com"
__status__ = "dev" 



PATH = "/Users/Celine/vitagene/script_in_out/average"

import logging, os, copy, re
from SharedFunctions import SharedFunctions

class Average():
    def __init__(self):
        self.SITE_SCORE = {'vitagene_score':1.0,    'mayo_clinic':1.0,    'webmd':1.0,    'vitaganic': (2.0/3.0) }
        self.util = SharedFunctions(PATH)
        self.trait_supp_score_weight = self.util.get_map('trait_supp_score')
        self.header =self.util.get_map('header_map')
        
    def get_average(self):
        for data in self.trait_supp_score_weight:
            denum = num = denum1 = num1 = 0
            for sites in self.SITE_SCORE:                
                if sites in data:
                    if sites != 'vitaganic':
                        denum1 += self.SITE_SCORE[sites]
                        num1 += data[sites]*self.SITE_SCORE[sites]
                    denum += self.SITE_SCORE[sites]
                    num += data[sites]*self.SITE_SCORE[sites]
            if denum >0:
                data ['weighted_average(mayo_clinic+webmd+vitagene_score+2/3vitaganic)'] = round((num/denum)/0.5,0)*0.5
            else:
                data['weighted_average(mayo_clinic+webmd+vitagene_score+2/3vitaganic)'] = None
            if  denum1 >0:
                data['average(mayo_clinic+webmd+vitagene_score'] = num1/denum1
                print data['supplement'],  data ['average(mayo_clinic+webmd+vitagene_score'] 
            else:
                data['average(mayo_clinic+webmd+vitagene_score'] = None
        self.util.output_file('trait_supp_score_weight',self.trait_supp_score_weight)
        self.util.write_output('trait_supp_score_weight',self.header,self.trait_supp_score_weight)
                  
### main function
if __name__ == "__main__":
    logging.basicConfig(filename='%s/%s' % (PATH,'log_Average'), filemode='w',
                        level=logging.DEBUG,format='%(asctime)s - %(levelname)s -%(message)s')
    logging.debug(' Function: __main__ input' )
    d = Average()
    d.get_average()

    print(' DONE -- Function: __main__' )
    logging.debug(' DONE -- Function: __main__' )
""" END OF main """
