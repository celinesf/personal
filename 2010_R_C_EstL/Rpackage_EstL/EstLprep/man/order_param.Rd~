\name{order_param}
\alias{order_param}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Order the paremeters
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
order_param(param, listparam, outparam = TRUE, outdata = TRUE)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{param}{
%%     ~~Describe \code{param} here~~
}
  \item{listparam}{
%%     ~~Describe \code{listparam} here~~
}
  \item{outparam}{
%%     ~~Describe \code{outparam} here~~
}
  \item{outdata}{
%%     ~~Describe \code{outdata} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
  Celine Becquet - \email{celine.becquet@gmail.com}. 
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (param, listparam, outparam = TRUE, outdata = TRUE) 
{
    for (i in 1:length(param)) {
        tp = clean_str(str = param[i], sep = " ")
        param[i] = tp[1]
    }
    if (length(listparam) == 10) {
        nrow = length(listparam) - 1
    }
    else {
        nrow = length(listparam) - 2
    }
    ret = list()
    ret$vparam = matrix(nr = nrow, nc = 3)
    ret$type = matrix(nr = 1, nc = 4)
    for (a in 1:length(param)) {
        paramtp = strsplit(param[a], split = c(" "))
        nparam = get_nparam(keyword = paramtp[[1]][1], listparam = listparam)
        if (nparam == 10 || nparam == 11) {
            if (nparam == 10) {
                j = 1
                i = 2
                while (i <= length(paramtp[[1]])) {
                  if (paramtp[[1]][i] != "") {
                    if (!is.na(as.numeric(paramtp[[1]][i]))) {
                      ret$type[1, j] = as.numeric(paramtp[[1]][i])
                    }
                    else {
                      tp = c("WARNING: In the parameter ", paramtp[[1]][1], 
                        " a value is not numeric: ", paramtp[[1]][i], 
                        ". It was therefor ignored.")
                      stp = c("'", "'", "'", "'")
                      error_message(tp, stp)
                    }
                    j = j + 1
                  }
                  i = i + 1
                }
            }
            else {
                if (outdata) {
                  tp = strsplit(param[a], split = "stats ")
                  ret$summaries = tp[[1]][2]
                }
            }
        }
        else {
            if (outparam || ((!outparam) && (nparam == 1 || nparam > 
                11 || nparam == 9))) {
                if (nparam > 11) {
                  nparam = nparam - 2
                }
                if (nparam != 0 && is.na(ret$vparam[nparam, 1])) {
                  j = 1
                  i = 2
                  while (i <= length(paramtp[[1]])) {
                    if (paramtp[[1]][i] != "") {
                      if (!is.na(as.numeric(paramtp[[1]][i]))) {
                        ret$vparam[nparam, j] = as.numeric(paramtp[[1]][i])
                      }
                      else {
                        tp = c("WARNING: In the parameter ", 
                          paramtp[[1]][1], " a value is not numeric: ", 
                          paramtp[[1]][i], ". It was therefor ignored.")
                        stp = c("'", "'", "'", "'")
                        error_message(tp, stp)
                      }
                      j = j + 1
                    }
                    i = i + 1
                  }
                }
                else {
                  if (nparam == 0) {
                    tp = c("WARNING: The parameter ", paramtp[[1]][1], 
                      " does not correspond to known information. It was therefor ignored.")
                    stp = c("'", "'")
                    error_message(tp, stp)
                  }
                  else {
                    tp = c("WARNING: The parameter ", paramtp[[1]][1], 
                      " with values ", paramtp[[1]][2:length(paramtp[[1]])], 
                      " was already used before with the values: ", 
                      ret$vparam[nparam, 1:3], ". It was therefore ignored.")
                    tpstp = "'"
                    for (a in 2:length(paramtp[[1]])) {
                      tpstp = c(tpstp, "'")
                    }
                    stp = c("'", "'", tpstp, "'", ", ", ", ", 
                      "'", "")
                    error_message(tp, stp)
                  }
                }
            }
        }
    }
    return(ret)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
