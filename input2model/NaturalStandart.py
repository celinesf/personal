#!/usr/bin/env python
"""
   extract data from natural standart raw file generated by Alan
   List the unic "therapies" so that Alan can make a map of the true supplements
   10/31/13 - 0.0.1 : creation
"""
__author__ = "Celine Becquet"
__copyright__ = "Copyright 2013, Viragene Inc."
__maintainer__ = "Celine Becquet"
__email__ = "celine@vitagene.com"
__status__ = "dev" 



PATH = "/Users/Celine/vitagene/script_in_out/natural_standart"

import logging, os, copy, re
from SharedFunctions import SharedFunctions

class NaturalStandart():
    def __init__(self):
        self.util = SharedFunctions(PATH)
        self.score_map = self.util.get_map('score_map')
        self.traits_map = self.util.get_map('traits_map') 
        self.supplements_map = self.util.get_map('supplements_map') 
        self.grade =None
        self.general_trait = None
        self.output_data = []
        self.header =['#','trait','priority','category','supplement','dose','natural_standart','mayo_clinic','webmd','vitaganic','vitaganic_sub_trait',]
    
    def clean_encoding(self,line):
        logging.debug(' Function: clean_encoding, line %s' % line )
        line = re.sub('\xed', 'i', line)
        line = re.sub('\xe7', 'c', line)
        line = re.sub('\xae', '', line)
        line = re.sub('\x99', '', line)
        line = re.sub('\xf6', '', line)
        line = re.sub('\xe9', 'e', line)
        line = re.sub('\xe8', 'e', line)
        return line
    
    def extract_data(self):
        logging.debug(' Function: extract_data' )
        batches_list = [i for i in os.listdir('%s/input' % (PATH)) if i.endswith('.txt')] 

        for filename in batches_list:

            self.util.warnMe('info', 'Extracting file: ' + filename )
            f = open('%s/input/%s' % (PATH,filename), 'rb')
            data = f.readlines()
            self.grade = ''
            counter = 0
            for line in data:
                l =line.strip()
                l = self.clean_encoding(l)
     
                # str.decode and str.encode function can be very useful
                try:
                    l.decode('UTF-8', 'strict')
                except UnicodeDecodeError:
                    
                    print l, re.findall(r'[\x80-\xFF]', l)
                if  l!= "":
                    if "and related conditions" in l:
                        self.general_trait =  l.split("and related conditions")[0]
                        self.util.warnMe('info', 'Extracting data for general_trait: ' + self.general_trait )
                    elif 'Grade:' in l:
                        self.grade =  {"grade":l.split(" ")[1]}
                        if self.grade['grade'] in self.score_map:
                            self.grade['natural_standart'] = self.score_map[self.grade['grade']]['score']
                        else:
                            self.util.warnMe('CRITICAL', ' CANNOT FIND THIS GRADE IN MAP ' + self.grade['grade'] )
                    elif 'Traditional or Theoretical Uses which Lack Sufficient Evidence' in l:
                        self.grade =  {"grade":"C"}
                        if self.grade['grade'] in self.score_map:
                            self.grade['natural_standart'] = self.score_map[self.grade['grade']]['score']
                        else:
                            self.util.warnMe('CRITICAL', ' CANNOT FIND THIS GRADE IN MAP ' + self.grade['grade'] )
                    elif self.grade is not None and "Therapy" != l and 'specific therap' not in l.lower() :
                        if counter == 0: #Therapy
                            self.data = copy.deepcopy(self.grade)
                            supp = self.util.check_map(self.supplements_map, l) 
                            self.data['supplement'] = supp
                            counter +=1
                        elif counter== 1: #Specific therapeutic Use(s)
                            trait = self.util.check_map(self.traits_map, l) 
                            self.data['trait'] = trait
                            self.output_data.append(self.data)
                            counter =0
                            
                            
            ### reset grade
            self.grade = None
        
        self.util.output_file('traits_map',self.traits_map)
        self.util.write_map('traits_map',self.traits_map)
        self.util.output_file('supplements_map',self.supplements_map)
        self.util.write_map('supplements_map',self.supplements_map)
        
        self.util.output_file('natural_score',self.output_data)
        self.util.write_output('natural_score',self.header,self.output_data)
        
### main function
if __name__ == "__main__":
    logging.basicConfig(filename='%s/%s' % (PATH,'log_NaturalStandart'), filemode='w',
                        level=logging.DEBUG,format='%(asctime)s - %(levelname)s -%(message)s')
    logging.debug(' Function: __main__ input' )
    d = NaturalStandart()
    d.extract_data()

    print(' DONE -- Function: __main__' )
    logging.debug(' DONE -- Function: __main__' )
""" END OF main """
