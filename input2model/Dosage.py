#!/usr/bin/env python
"""
   extract data from natural standart raw file generated by Farzin
   11/12/13 - 0.0.1 : creation
"""
__author__ = "Celine Becquet"
__copyright__ = "Copyright 2013, Viragene Inc."
__maintainer__ = "Celine Becquet"
__email__ = "celine@vitagene.com"
__status__ = "dev" 



PATH = "/Users/Celine/vitagene/script_in_out/dosage"

import logging, os, copy, re, json
from SharedFunctions import SharedFunctions

class Dosage():
    def __init__(self):
        self.util = SharedFunctions(PATH)
        self.supplements_map = self.util.get_map('supplements_map') 
        self.adverse_effects_map = {}
        self.dosage_map = []
        self.maps = {}
        
        self.effect_map = {}
        self.doc = {}
     
    def fill_info(self, words):
        
        for h in range(0,len(self.header)):
            if words[h] != '' and h < len(self.header)-1:
                if '*' in words[h] : # not RDA but AI data
                    self.info['ai'] = words[h].replace('*','')
                elif type(words[h]) == str:
                    word = self.util.check_map(self.maps[self.header[h]], words[h], False, None)
                    self.info[self.header[h]] = word
                else:
                    self.info[self.header[h]] = words[h]
                    
            elif  words[h] != '' and h < len(self.header):
                if self.info['supplement'] not in self.effect_map:
                    self.effect_map[self.info['supplement']] = []
                effect = self.util.check_map(self.maps[self.header[h]], words[h], False, None)
                self.effect_map[self.info['supplement']].append(effect)


    def init_info(self):
        for h in range(3,len(self.header)):
            if self.header[h] in self.info:
                self.info.pop(self.header[h])
        if 'ai' in self.info:
            self.info.pop('ai')  
  
    def extract_data(self):
        logging.debug(' Function: extract_data' )
        input_file = open("%s/input/dosage.txt" % PATH)
        lines = input_file.readlines()
        self.info = {}
        nl = 0
        for line in lines:
            if nl == 0:
                self.header = self.util.get_header(line, None)
                for h in self.header:
                    self.maps[h] = {}
            elif nl>0:
                self.init_info()                    
                self.fill_info(line.split('\t'))
                self.dosage_map.append(copy.deepcopy(self.info))
            nl += 1
        
        self.header.insert(self.header.index('rda')+1,'ai')
        self.header.pop(self.header.index('adverse_effects'))
        
        self.util.output_file('effect_map',self.effect_map)
        self.util.write_map('effect_map',self.effect_map)
        
        self.util.output_file('dosage_map',self.dosage_map)
        self.util.write_output('dosage_map',self.header,self.dosage_map)
        
        for data in self.maps:
            self.util.output_file(data,self.maps[data])
            self.util.write_map(data,self.maps[data])


                
### main function
if __name__ == "__main__":
    logging.basicConfig(filename='%s/%s' % (PATH,'log_Dosage'), filemode='w',
                        level=logging.DEBUG,format='%(asctime)s - %(levelname)s -%(message)s')
    logging.debug(' Function: __main__ input' )
    d = Dosage()
    d.extract_data()

    print(' DONE -- Function: __main__' )
    logging.debug(' DONE -- Function: __main__' )
""" END OF main """
